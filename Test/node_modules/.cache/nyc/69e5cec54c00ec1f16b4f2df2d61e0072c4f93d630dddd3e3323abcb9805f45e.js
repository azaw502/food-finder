var cov_1mxhbo42ed=function(){var path="C:\\Users\\vinni\\OneDrive\\Desktop\\Junior Year (2018-2019)\\Food Finder\\food-finder\\Test\\validateText.js";var hash="8bde77a07d11012c76892b9d35635555df48ed93";var Function=function(){}.constructor;var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\vinni\\OneDrive\\Desktop\\Junior Year (2018-2019)\\Food Finder\\food-finder\\Test\\validateText.js",statementMap:{"0":{start:{line:5,column:0},end:{line:44,column:1}},"1":{start:{line:7,column:13},end:{line:7,column:50}},"2":{start:{line:10,column:2},end:{line:13,column:3}},"3":{start:{line:12,column:4},end:{line:12,column:139}},"4":{start:{line:16,column:2},end:{line:22,column:3}},"5":{start:{line:16,column:15},end:{line:16,column:16}},"6":{start:{line:18,column:3},end:{line:21,column:4}},"7":{start:{line:20,column:2},end:{line:20,column:137}},"8":{start:{line:25,column:2},end:{line:27,column:33}},"9":{start:{line:26,column:4},end:{line:26,column:12}},"10":{start:{line:33,column:0},end:{line:36,column:1}},"11":{start:{line:35,column:2},end:{line:35,column:137}},"12":{start:{line:39,column:0},end:{line:42,column:1}},"13":{start:{line:41,column:2},end:{line:41,column:137}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:5,column:17},end:{line:5,column:18}},loc:{start:{line:6,column:0},end:{line:44,column:1}},line:6},"1":{name:"(anonymous_1)",decl:{start:{line:25,column:21},end:{line:25,column:22}},loc:{start:{line:25,column:33},end:{line:27,column:3}},line:25}},branchMap:{"0":{loc:{start:{line:10,column:2},end:{line:13,column:3}},type:"if",locations:[{start:{line:10,column:2},end:{line:13,column:3}},{start:{line:10,column:2},end:{line:13,column:3}}],line:10},"1":{loc:{start:{line:18,column:3},end:{line:21,column:4}},type:"if",locations:[{start:{line:18,column:3},end:{line:21,column:4}},{start:{line:18,column:3},end:{line:21,column:4}}],line:18},"2":{loc:{start:{line:18,column:7},end:{line:18,column:41}},type:"binary-expr",locations:[{start:{line:18,column:7},end:{line:18,column:22}},{start:{line:18,column:26},end:{line:18,column:41}}],line:18},"3":{loc:{start:{line:33,column:0},end:{line:36,column:1}},type:"if",locations:[{start:{line:33,column:0},end:{line:36,column:1}},{start:{line:33,column:0},end:{line:36,column:1}}],line:33},"4":{loc:{start:{line:39,column:0},end:{line:42,column:1}},type:"if",locations:[{start:{line:39,column:0},end:{line:42,column:1}},{start:{line:39,column:0},end:{line:42,column:1}}],line:39}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_1mxhbo42ed.s[0]++;// This function tests if a number entered in is within a certain range
// and is indeed a number
module.exports=function(){cov_1mxhbo42ed.f[0]++;var args=(cov_1mxhbo42ed.s[1]++,Array.prototype.slice.call(arguments));// Throw error if arguments contain non-finite number values
cov_1mxhbo42ed.s[2]++;if(!args.every(Number.isFinite)){cov_1mxhbo42ed.b[0][0]++;cov_1mxhbo42ed.s[3]++;throw new TypeError('validateText() expects only number input in range 10001 - 11104, no blank input, letters, or special characters.');}else{cov_1mxhbo42ed.b[0][1]++;}// Throw error if arguments contain number values beyond the range of NYC's zipcodes
cov_1mxhbo42ed.s[4]++;for(var i=(cov_1mxhbo42ed.s[5]++,0);i<args.length;i++){cov_1mxhbo42ed.s[6]++;if((cov_1mxhbo42ed.b[2][0]++,args[i]<10001)||(cov_1mxhbo42ed.b[2][1]++,args[i]>11104)){cov_1mxhbo42ed.b[1][0]++;cov_1mxhbo42ed.s[7]++;throw new TypeError('validateText() expects only number input in range 10001 - 11104, no blank input, letters, or special characters.');}else{cov_1mxhbo42ed.b[1][1]++;}}// Return the zipcode
cov_1mxhbo42ed.s[8]++;return args.reduce(function(a){cov_1mxhbo42ed.f[1]++;cov_1mxhbo42ed.s[9]++;return a;},10001,10002,10004,11104);// start of Vinnie's functions
// Throw error if arguments contain special characters
cov_1mxhbo42ed.s[10]++;if(!args.every(Number.isInteger)){cov_1mxhbo42ed.b[3][0]++;cov_1mxhbo42ed.s[11]++;throw new TypeError('validateText() expects only number input in range 10001 - 11104, no blank input, letters, or special characters.');}else{cov_1mxhbo42ed.b[3][1]++;}// Throw error if argument is null
cov_1mxhbo42ed.s[12]++;if(args==null){cov_1mxhbo42ed.b[4][0]++;cov_1mxhbo42ed.s[13]++;throw new TypeError('validateText() expects only number input in range 10001 - 11104, no blank input, letters, or special characters.');}else{cov_1mxhbo42ed.b[4][1]++;}};